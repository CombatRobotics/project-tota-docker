# syntax=docker/dockerfile:1.4

ARG DEV_IMAGE=ros-dev:amd64
FROM ${DEV_IMAGE} AS full

ARG TARGETARCH
ARG GZ_ROS2_CONTROL_WS=/opt/gz_ros2_control_ws
ARG USERNAME=devuser
ARG WORKSPACE_PATH=/ws
ARG INSTALL_CLAUDE=false
ARG FIX_QT_FLICKERING=true
ARG ROS_DOMAIN_ID=0
ARG ROS_LOCALHOST_ONLY=0

# Switch to root for installations
USER root

# Copy packages list
COPY packages.txt /tmp/packages.txt

# Install all packages from packages.txt
# Simply comment/uncomment lines in packages.txt to control what gets installed
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked <<'EOF'
set -euo pipefail
rm -f /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock
apt-get update
export DEBIAN_FRONTEND=noninteractive
mapfile -t pkgs < <(grep -Ev '^[[:space:]]*($|#)' /tmp/packages.txt)
if [ "${#pkgs[@]}" -gt 0 ]; then
    apt-get install -y --no-install-recommends "${pkgs[@]}"
fi
rm -rf /var/lib/apt/lists/* /tmp/packages.txt
EOF

# Claude AI Assistant (Optional)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    bash -c 'set -euo pipefail; \
    if [ "$INSTALL_CLAUDE" = "true" ]; then \
        rm -f /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock && \
        export DEBIAN_FRONTEND=noninteractive && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get install -y nodejs && \
        npm install -g @anthropic-ai/claude-code && \
        rm -rf /var/lib/apt/lists/*; \
    fi'

# Workspace Setup
RUN mkdir -p ${WORKSPACE_PATH} && \
    chown -R ${USERNAME}:${USERNAME} ${WORKSPACE_PATH}

RUN rm -rf /workspace && ln -s ${WORKSPACE_PATH} /workspace

# Environment Configuration (extends base image environment)
RUN <<EOF
set -euo pipefail
cat <<BASE >> /home/${USERNAME}/.bashrc

# Source local workspace if it exists
if [ -f ${WORKSPACE_PATH}/install/setup.bash ]; then
    source ${WORKSPACE_PATH}/install/setup.bash
fi

# ROS configuration
export ROS_DOMAIN_ID=${ROS_DOMAIN_ID}
export ROS_LOCALHOST_ONLY=${ROS_LOCALHOST_ONLY}

# Display configuration
export DISPLAY=\${DISPLAY:-:0}
export QT_X11_NO_MITSHM=1
export QT_QPA_PLATFORM=xcb

# Build configuration (for reference)
export INSTALL_CLAUDE=${INSTALL_CLAUDE}
export FIX_QT_FLICKERING=${FIX_QT_FLICKERING}
BASE

if [ "$TARGETARCH" = "amd64" ]; then
cat <<AMD64 >> /home/${USERNAME}/.bashrc

# Workspace paths
export GZ_SIM_RESOURCE_PATH=${GZ_ROS2_CONTROL_WS}/install/share:${WORKSPACE_PATH}/install/share:${WORKSPACE_PATH}/src:\$GZ_SIM_RESOURCE_PATH
AMD64
fi

if [ "$TARGETARCH" = "amd64" ] && [ "$FIX_QT_FLICKERING" = "true" ]; then
cat <<'QT' >> /home/${USERNAME}/.bashrc

# Qt Scene Graph fix for Gazebo GUI flickering
export QSG_RENDER_LOOP=basic
QT
fi
EOF

RUN echo "cd ${WORKSPACE_PATH}" >> /home/${USERNAME}/.bashrc

# Switch back to non-root user
USER ${USERNAME}

WORKDIR ${WORKSPACE_PATH}

SHELL ["/bin/bash", "-c"]
CMD ["/bin/bash"]

FROM full AS tota

ARG USERNAME=user
ARG WORKSPACE_PATH=/ros2ws

ENV DEBIAN_FRONTEND=noninteractive
ENV HOME=/home/${USERNAME}

USER root

# Runtime frameworks required by setup scripts (Cyclone DDS, GStreamer, wireless deps, python tooling)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked <<'EOF'
set -euo pipefail
rm -f /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock
apt-get update
apt-get install -y --no-install-recommends \
    ros-humble-cyclonedds \
    ros-humble-rmw-cyclonedds-cpp \
    net-tools \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gstreamer1.0-x \
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-qt5 \
    gstreamer1.0-pulseaudio \
    python3-gi \
    python3-gi-cairo \
    gir1.2-gtk-3.0 \
    gir1.2-gstreamer-1.0 \
    gobject-introspection \
    dkms \
    python3-all-dev \
    fakeroot \
    debhelper \
    python3-twisted \
    libpcap-dev \
    python3-pyroute2 \
    python3-future \
    python3-all \
    libsodium-dev \
    python3-venv \
    git
rm -rf /var/lib/apt/lists/*
EOF

# Provide default Cyclone DDS configuration
RUN <<'EOF'
set -euo pipefail
cat >/home/${USERNAME}/cyclonedds.xml <<'XML'
<?xml version="1.0" encoding="UTF-8" ?>
<CycloneDDS xmlns="https://cdds.io/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://cdds.io/config https://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd">
    <Domain id="any">
        <General>
            <Interfaces>
                <NetworkInterface name="lo" priority="default" multicast="true" />
            </Interfaces>
        </General>
    </Domain>
</CycloneDDS>
XML
chown ${USERNAME}:${USERNAME} /home/${USERNAME}/cyclonedds.xml
EOF

ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
ENV CYCLONEDDS_URI=file://$HOME/cyclonedds.xml
ENV PROJECT_TOTA_PATH=${WORKSPACE_PATH}

# Stage wireless ground-station dependencies
RUN <<'EOF'
set -euo pipefail
mkdir -p /opt/tota_gs
cd /opt/tota_gs
if [ ! -d libsodium ]; then
    git clone --depth=1 --branch stable https://github.com/jedisct1/libsodium.git
fi
cd libsodium
./configure
make -j"$(nproc)"
make install
ldconfig
cd /opt/tota_gs
if [ ! -d rtl8812au ]; then
    git clone --depth=1 --branch v5.2.20 https://github.com/svpcom/rtl8812au.git
fi
if [ ! -d wfb-ng ]; then
    git clone --depth=1 --branch stable https://github.com/svpcom/wfb-ng.git
fi
EOF

COPY requirements.txt /tmp/requirements.txt

USER ${USERNAME}
RUN <<'EOF'
set -euo pipefail
python3 -m pip install --upgrade --user pip
python3 -m pip install --user --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.4
python3 -m pip install --user onnxruntime-rocm -f https://repo.radeon.com/rocm/manylinux/rocm-rel-6.4.2/
if [ -f /tmp/requirements.txt ]; then
    python3 -m pip install --user -r /tmp/requirements.txt
fi
python3 -m pip install --user --no-deps insightface==0.7.3
EOF

USER root
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.local /opt/tota_gs

ENV PATH=/home/${USERNAME}/.local/bin:${PATH}

USER ${USERNAME}
WORKDIR ${WORKSPACE_PATH}

ENV DEBIAN_FRONTEND=
